#include <stdio.h>
#include <math.h>

#include "hls_half.h"

typedef half data_t;
//typedef float data_t;
typedef half cmpt_t;
//typedef float cmpt_t;

cmpt_t sin_tbl[16][16]={
{0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,},
{0.000000,0.382683,0.707107,0.923880,1.000000,0.923880,0.707107,0.382683,-0.000000,-0.382683,-0.707107,-0.923880,-1.000000,-0.923879,-0.707107,-0.382683,},
{0.000000,0.707107,1.000000,0.707107,-0.000000,-0.707107,-1.000000,-0.707107,0.000000,0.707107,1.000000,0.707106,-0.000000,-0.707107,-1.000000,-0.707107,},
{0.000000,0.923880,0.707107,-0.382683,-1.000000,-0.382683,0.707107,0.923879,-0.000000,-0.923879,-0.707107,0.382684,1.000000,0.382684,-0.707107,-0.923879,},
{0.000000,1.000000,-0.000000,-1.000000,0.000000,1.000000,-0.000000,-1.000000,0.000000,1.000000,-0.000001,-1.000000,0.000000,1.000000,-0.000001,-1.000000,},
{0.000000,0.923880,-0.707107,-0.382683,1.000000,-0.382684,-0.707107,0.923880,0.000000,-0.923879,0.707107,0.382683,-1.000000,0.382683,0.707107,-0.923879,},
{0.000000,0.707107,-1.000000,0.707107,-0.000000,-0.707107,1.000000,-0.707107,0.000000,0.707107,-1.000000,0.707107,-0.000000,-0.707107,1.000000,-0.707108,},
{0.000000,0.382683,-0.707107,0.923880,-1.000000,0.923880,-0.707106,0.382683,0.000001,-0.382684,0.707107,-0.923880,1.000000,-0.923879,0.707106,-0.382682,},
{0.000000,-0.000000,0.000000,-0.000000,0.000000,-0.000001,0.000000,-0.000001,0.000001,-0.000000,0.000001,-0.000003,0.000000,-0.000001,0.000003,-0.000000,},
{0.000000,-0.382683,0.707107,-0.923879,1.000000,-0.923879,0.707107,-0.382684,-0.000000,0.382684,-0.707108,0.923879,-1.000000,0.923879,-0.707107,0.382682,},
{0.000000,-0.707107,1.000000,-0.707107,0.000000,0.707107,-1.000000,0.707107,-0.000001,-0.707108,1.000000,-0.707106,-0.000000,0.707107,-1.000000,0.707107,},
{0.000000,-0.923880,0.707107,0.382683,-1.000000,0.382683,0.707106,-0.923880,0.000001,0.923879,-0.707106,-0.382681,1.000000,-0.382684,-0.707104,0.923879,},
{0.000000,-1.000000,-0.000000,1.000000,0.000000,-1.000000,-0.000000,1.000000,0.000000,-1.000000,-0.000000,1.000000,0.000000,-1.000000,-0.000004,1.000000,},
{0.000000,-0.923879,-0.707107,0.382683,1.000000,0.382683,-0.707106,-0.923880,-0.000001,0.923879,0.707107,-0.382681,-1.000000,-0.382688,0.707104,0.923881,},
{0.000000,-0.707107,-1.000000,-0.707106,0.000001,0.707107,1.000000,0.707106,-0.000001,-0.707107,-1.000000,-0.707107,0.000004,0.707109,1.000000,0.707105,},
{0.000000,-0.382683,-0.707107,-0.923879,-1.000000,-0.923879,-0.707108,-0.382682,-0.000000,0.382682,0.707107,0.923879,1.000000,0.923881,0.707105,0.382682,},
};

cmpt_t cos_tbl[16][16]={
{1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,1.000000,},
{1.000000,0.923880,0.707107,0.382683,-0.000000,-0.382684,-0.707107,-0.923880,-1.000000,-0.923880,-0.707107,-0.382683,0.000000,0.382684,0.707107,0.923880,},
{1.000000,0.707107,-0.000000,-0.707107,-1.000000,-0.707107,0.000000,0.707107,1.000000,0.707107,-0.000000,-0.707107,-1.000000,-0.707107,0.000001,0.707107,},
{1.000000,0.382683,-0.707107,-0.923880,0.000000,0.923880,0.707107,-0.382684,-1.000000,-0.382684,0.707107,0.923879,-0.000000,-0.923879,-0.707106,0.382684,},
{1.000000,-0.000000,-1.000000,0.000000,1.000000,-0.000000,-1.000000,0.000001,1.000000,-0.000000,-1.000000,0.000001,1.000000,-0.000001,-1.000000,0.000000,},
{1.000000,-0.382683,-0.707107,0.923880,0.000000,-0.923879,0.707107,0.382684,-1.000000,0.382684,0.707107,-0.923880,0.000000,0.923880,-0.707107,-0.382684,},
{1.000000,-0.707107,0.000000,0.707107,-1.000000,0.707107,-0.000000,-0.707106,1.000000,-0.707106,0.000000,0.707106,-1.000000,0.707106,-0.000002,-0.707106,},
{1.000000,-0.923880,0.707107,-0.382683,-0.000000,0.382684,-0.707107,0.923880,-1.000000,0.923879,-0.707107,0.382683,0.000002,-0.382685,0.707108,-0.923880,},
{1.000000,-1.000000,1.000000,-1.000000,1.000000,-1.000000,1.000000,-1.000000,1.000000,-1.000000,1.000000,-1.000000,1.000000,-1.000000,1.000000,-1.000000,},
{1.000000,-0.923880,0.707107,-0.382684,-0.000000,0.382684,-0.707106,0.923879,-1.000000,0.923879,-0.707106,0.382684,-0.000002,-0.382684,0.707106,-0.923880,},
{1.000000,-0.707107,0.000000,0.707107,-1.000000,0.707107,0.000000,-0.707107,1.000000,-0.707106,-0.000001,0.707107,-1.000000,0.707107,-0.000000,-0.707106,},
{1.000000,-0.382684,-0.707107,0.923880,-0.000001,-0.923880,0.707107,0.382682,-1.000000,0.382684,0.707107,-0.923881,0.000002,0.923879,-0.707110,-0.382684,},
{1.000000,0.000000,-1.000000,-0.000000,1.000000,0.000000,-1.000000,-0.000002,1.000000,-0.000002,-1.000000,-0.000002,1.000000,-0.000002,-1.000000,-0.000002,},
{1.000000,0.382684,-0.707107,-0.923880,-0.000001,0.923880,0.707107,-0.382681,-1.000000,-0.382684,0.707107,0.923881,0.000002,-0.923878,-0.707110,0.382680,},
{1.000000,0.707107,-0.000000,-0.707107,-1.000000,-0.707107,0.000002,0.707108,1.000000,0.707106,-0.000000,-0.707107,-1.000000,-0.707104,0.000003,0.707109,},
{1.000000,0.923880,0.707107,0.382684,0.000000,-0.382684,-0.707106,-0.923880,-1.000000,-0.923880,-0.707106,-0.382684,-0.000002,0.382680,0.707109,0.923880,},
};


void DFT_pipe( data_t real[16], data_t imag[16])
{
    cmpt_t tmpReal[16], tmpImag[16];

    DFT_LOOP: for (int i = 0; i < 16; i++) {
#pragma HLS pipeline
        tmpReal[i] = 0.0;
        tmpImag[i] = 0.0;

        DFT_MAC: for (int j = 0; j < 16; j++) {
            tmpReal[i] += real[j] * cos_tbl[i][j];
            tmpImag[i] -= real[j] * sin_tbl[i][j];
        }
    }

    WB: for (int i = 0; i < 16; i++) {
        real[i] = (data_t)tmpReal[i];
        imag[i] = (data_t)tmpImag[i];
    }
}


void DFT_trigo_tbl( data_t real[16], data_t imag[16])
{
    cmpt_t tmpReal[16], tmpImag[16];

    DFT_LOOP: for (int i = 0; i < 16; i++) {
        tmpReal[i] = 0.0;
        tmpImag[i] = 0.0;

        DFT_MAC: for (int j = 0; j < 16; j++) {
            tmpReal[i] += real[j] * cos_tbl[i][j];
            tmpImag[i] -= real[j] * sin_tbl[i][j];
        }
    }

    WB: for (int i = 0; i < 16; i++) {
        real[i] = (data_t)tmpReal[i];
        imag[i] = (data_t)tmpImag[i];
    }
}


void DFT( data_t real[16], data_t imag[16])
{
    cmpt_t tmpReal[16], tmpImag[16];

    DFT_LOOP: for (int i = 0; i < 16; i++) {

        tmpReal[i] = 0.0;
        tmpImag[i] = 0.0;

        float d = 2.0 * M_PI * i / 16;

        DFT_MAC: for (int j = 0; j < 16; j++) {

            float phase = d * j;

            tmpReal[i] += real[j] * cos(phase);
            tmpImag[i] -= real[j] * sin(phase);
        }
    }

    WB: for (int i = 0; i < 16; i++) {
        real[i] = (data_t)tmpReal[i];
        imag[i] = (data_t)tmpImag[i];
    }
}

int main (int argc, const char * argv[])
{
    data_t real[16], imag[16];

    data_t d = 2.0 * M_PI / 16;

    for (int i = 0; i < 16; i++) {
        real[i] = sin(1.0 * i * d); //1Hz Sin Wave
        real[i] += sin(3.0 * i * d + M_PI_4); // 3Hz Sin Wave
        real[i] += sin(5.0 * i * d + M_PI_2); // 5Hz Sin Wave
        imag[i] = 0.0;
    }

    //ã€€Discrete Fourier Transform
    DFT( real, imag);

    for (int i = 0; i < 16; i++) {
        printf("%dHz %f\n", i, sqrt(real[i] * real[i] + imag[i] * imag[i]));
    }

    return 0;
}
